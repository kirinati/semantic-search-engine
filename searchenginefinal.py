{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\n# %% [code] {\"_kg_hide-input\":true,\"_kg_hide-output\":true}\n!pip install datasets\n\n# %% [code] {\"_kg_hide-input\":true,\"execution\":{\"iopub.status.busy\":\"2023-04-27T14:37:55.110086Z\",\"iopub.execute_input\":\"2023-04-27T14:37:55.110738Z\",\"iopub.status.idle\":\"2023-04-27T14:38:07.215160Z\",\"shell.execute_reply.started\":\"2023-04-27T14:37:55.110700Z\",\"shell.execute_reply\":\"2023-04-27T14:38:07.213945Z\"}}\n!pip install pinecone-client\n\n# %% [code] {\"_kg_hide-input\":true,\"execution\":{\"iopub.status.busy\":\"2023-04-27T14:38:34.592398Z\",\"iopub.execute_input\":\"2023-04-27T14:38:34.592772Z\",\"iopub.status.idle\":\"2023-04-27T14:38:45.992894Z\",\"shell.execute_reply.started\":\"2023-04-27T14:38:34.592739Z\",\"shell.execute_reply\":\"2023-04-27T14:38:45.991606Z\"}}\npip install sentence-transformers\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-25T17:31:58.159323Z\",\"iopub.execute_input\":\"2023-04-25T17:31:58.160085Z\",\"iopub.status.idle\":\"2023-04-25T17:32:09.296151Z\",\"shell.execute_reply.started\":\"2023-04-25T17:31:58.160039Z\",\"shell.execute_reply\":\"2023-04-25T17:32:09.294794Z\"},\"_kg_hide-input\":true}\npip install torch\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-27T14:37:28.529733Z\",\"iopub.execute_input\":\"2023-04-27T14:37:28.530716Z\",\"iopub.status.idle\":\"2023-04-27T14:37:42.318996Z\",\"shell.execute_reply.started\":\"2023-04-27T14:37:28.530676Z\",\"shell.execute_reply\":\"2023-04-27T14:37:42.317938Z\"}}\nfrom datasets import load_dataset\n\ndf = load_dataset(\"squad\", split=\"train\").to_pandas()\ndf = df[[\"title\", \"context\"]]\ndf = df.drop_duplicates(subset=\"context\")\ndf\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-27T14:38:13.573383Z\",\"iopub.execute_input\":\"2023-04-27T14:38:13.573762Z\",\"iopub.status.idle\":\"2023-04-27T14:38:14.201720Z\",\"shell.execute_reply.started\":\"2023-04-27T14:38:13.573727Z\",\"shell.execute_reply\":\"2023-04-27T14:38:14.200717Z\"}}\nimport pinecone\npinecone.init(\n    api_key=\"71065eff-7f95-48c2-a3e1-4d2ef782a8a8\",\n    environment=\"eu-west4-gcp\"\n)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-27T14:38:19.760091Z\",\"iopub.execute_input\":\"2023-04-27T14:38:19.760786Z\",\"iopub.status.idle\":\"2023-04-27T14:38:20.328891Z\",\"shell.execute_reply.started\":\"2023-04-27T14:38:19.760748Z\",\"shell.execute_reply\":\"2023-04-27T14:38:20.327885Z\"}}\nindex_name = \"extractive-question-answering\"\n\n\nif index_name not in pinecone.list_indexes():\n\n    pinecone.create_index(\n        index_name,\n        dimension=384,\n        metric=\"cosine\"\n    )\nindex = pinecone.Index(index_name)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-27T14:38:52.860802Z\",\"iopub.execute_input\":\"2023-04-27T14:38:52.861819Z\",\"iopub.status.idle\":\"2023-04-27T14:39:01.311442Z\",\"shell.execute_reply.started\":\"2023-04-27T14:38:52.861776Z\",\"shell.execute_reply\":\"2023-04-27T14:39:01.310402Z\"}}\nimport torch\nfrom sentence_transformers import SentenceTransformer\n\n\ndevice = 0 if torch.cuda.is_available() else -1\n\nretriever = SentenceTransformer('multi-qa-MiniLM-L6-cos-v1', device=device)\nretriever\n\n# %% [code] {\"_kg_hide-input\":true,\"execution\":{\"iopub.status.busy\":\"2023-04-27T14:39:04.472273Z\",\"iopub.execute_input\":\"2023-04-27T14:39:04.472664Z\",\"iopub.status.idle\":\"2023-04-27T14:41:25.648900Z\",\"shell.execute_reply.started\":\"2023-04-27T14:39:04.472628Z\",\"shell.execute_reply\":\"2023-04-27T14:41:25.647510Z\"}}\nfrom tqdm.auto import tqdm\n\n\nbatch_size = 64\n\nfor i in tqdm(range(0, len(df), batch_size)):\n    \n    i_end = min(i+batch_size, len(df))\n    batch = df.iloc[i:i_end]\n    emb = retriever.encode(batch[\"context\"].tolist()).tolist()\n    meta = batch.to_dict(orient=\"records\")\n    ids = [f\"{idx}\" for idx in range(i, i_end)]\n    to_upsert = list(zip(ids, emb, meta))\n    _ = index.upsert(vectors=to_upsert)\n\nindex.describe_index_stats()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-27T14:42:16.819165Z\",\"iopub.execute_input\":\"2023-04-27T14:42:16.819567Z\",\"iopub.status.idle\":\"2023-04-27T14:42:30.709684Z\",\"shell.execute_reply.started\":\"2023-04-27T14:42:16.819532Z\",\"shell.execute_reply\":\"2023-04-27T14:42:30.708635Z\"}}\nfrom transformers import pipeline\n\nmodel_name = \"deepset/electra-base-squad2\"\nreader = pipeline(tokenizer=model_name, model=model_name, task=\"question-answering\", device=device)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-27T14:42:47.104712Z\",\"iopub.execute_input\":\"2023-04-27T14:42:47.105484Z\",\"iopub.status.idle\":\"2023-04-27T14:42:47.302534Z\",\"shell.execute_reply.started\":\"2023-04-27T14:42:47.105445Z\",\"shell.execute_reply\":\"2023-04-27T14:42:47.301584Z\"}}\ndef get_context(question, top_k):\n    xq = retriever.encode([question]).tolist()\n    xc = index.query(xq, top_k=top_k, include_metadata=True)\n    c = [x[\"metadata\"][\"context\"] for x in xc[\"matches\"]]\n    return c\n\nquestion = \"How much oil is Egypt producing in a day?\"\ncontext = get_context(question, top_k = 1)\ncontext\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-27T14:42:51.416473Z\",\"iopub.execute_input\":\"2023-04-27T14:42:51.416852Z\",\"iopub.status.idle\":\"2023-04-27T14:42:51.443121Z\",\"shell.execute_reply.started\":\"2023-04-27T14:42:51.416818Z\",\"shell.execute_reply\":\"2023-04-27T14:42:51.441985Z\"}}\nfrom pprint import pprint\n\n\ndef extract_answer(question, context):\n    results = []\n    for c in context:\n        \n        answer = reader(question=question, context=c)\n        \n        answer[\"context\"] = c\n        results.append(answer)\n    \n    sorted_result = pprint(sorted(results, key=lambda x: x[\"score\"], reverse=True))\n    return sorted_result\n\nextract_answer(question, context)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-27T14:43:09.975433Z\",\"iopub.execute_input\":\"2023-04-27T14:43:09.975821Z\",\"iopub.status.idle\":\"2023-04-27T14:43:10.168253Z\",\"shell.execute_reply.started\":\"2023-04-27T14:43:09.975787Z\",\"shell.execute_reply\":\"2023-04-27T14:43:10.167087Z\"}}\nquestion = \"What are the first names of the men that invented youtube?\"\ncontext = get_context(question, top_k=1)\nextract_answer(question, context)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-27T14:43:12.715569Z\",\"iopub.execute_input\":\"2023-04-27T14:43:12.716282Z\",\"iopub.status.idle\":\"2023-04-27T14:43:12.917275Z\",\"shell.execute_reply.started\":\"2023-04-27T14:43:12.716241Z\",\"shell.execute_reply\":\"2023-04-27T14:43:12.915980Z\"}}\nquestion = \"What is Taylor Swift famous for?\"\ncontext = get_context(question, top_k=1)\nextract_answer(question, context)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-27T14:43:15.087727Z\",\"iopub.execute_input\":\"2023-04-27T14:43:15.088440Z\",\"iopub.status.idle\":\"2023-04-27T14:43:15.307939Z\",\"shell.execute_reply.started\":\"2023-04-27T14:43:15.088401Z\",\"shell.execute_reply\":\"2023-04-27T14:43:15.306961Z\"}}\nquestion = \"Who was the first person to step foot on the moon?\"\ncontext = get_context(question, top_k=3)\nextract_answer(question, context)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-27T14:43:30.022382Z\",\"iopub.execute_input\":\"2023-04-27T14:43:30.022751Z\",\"iopub.status.idle\":\"2023-04-27T14:43:43.270886Z\",\"shell.execute_reply.started\":\"2023-04-27T14:43:30.022718Z\",\"shell.execute_reply\":\"2023-04-27T14:43:43.269661Z\"}}\n pip install streamlit\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-27T14:45:15.874981Z\",\"iopub.execute_input\":\"2023-04-27T14:45:15.875355Z\",\"iopub.status.idle\":\"2023-04-27T14:45:16.845261Z\",\"shell.execute_reply.started\":\"2023-04-27T14:45:15.875321Z\",\"shell.execute_reply\":\"2023-04-27T14:45:16.844228Z\"}}\nimport streamlit as st\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-27T14:45:24.766336Z\",\"iopub.execute_input\":\"2023-04-27T14:45:24.766710Z\",\"iopub.status.idle\":\"2023-04-27T14:45:24.774315Z\",\"shell.execute_reply.started\":\"2023-04-27T14:45:24.766675Z\",\"shell.execute_reply\":\"2023-04-27T14:45:24.772830Z\"}}\nstreamlit run my_app.py\n\n# %% [code]\n","metadata":{"_uuid":"97fdf39a-e525-4bca-9200-b741080e71c4","_cell_guid":"768e1cd7-7a5e-429e-9caa-acb54671814b","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}