{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\n# %% [code] {\"_kg_hide-input\":true,\"_kg_hide-output\":true,\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:30:03.202060Z\",\"iopub.execute_input\":\"2023-04-28T10:30:03.203049Z\",\"iopub.status.idle\":\"2023-04-28T10:30:12.922993Z\",\"shell.execute_reply.started\":\"2023-04-28T10:30:03.202983Z\",\"shell.execute_reply\":\"2023-04-28T10:30:12.921656Z\"}}\n!pip install datasets\n\n# %% [code] {\"_kg_hide-input\":true,\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:30:19.305140Z\",\"iopub.execute_input\":\"2023-04-28T10:30:19.306305Z\",\"iopub.status.idle\":\"2023-04-28T10:30:29.530229Z\",\"shell.execute_reply.started\":\"2023-04-28T10:30:19.306253Z\",\"shell.execute_reply\":\"2023-04-28T10:30:29.528770Z\"}}\n!pip install pinecone-client\n\n# %% [code] {\"_kg_hide-input\":true,\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:30:34.374776Z\",\"iopub.execute_input\":\"2023-04-28T10:30:34.375782Z\",\"iopub.status.idle\":\"2023-04-28T10:30:44.245154Z\",\"shell.execute_reply.started\":\"2023-04-28T10:30:34.375734Z\",\"shell.execute_reply\":\"2023-04-28T10:30:44.244030Z\"}}\npip install sentence-transformers\n\n# %% [code] {\"_kg_hide-input\":true,\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:30:47.220736Z\",\"iopub.execute_input\":\"2023-04-28T10:30:47.221344Z\",\"iopub.status.idle\":\"2023-04-28T10:30:57.526238Z\",\"shell.execute_reply.started\":\"2023-04-28T10:30:47.221299Z\",\"shell.execute_reply\":\"2023-04-28T10:30:57.524788Z\"}}\npip install torch\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:31:00.262813Z\",\"iopub.execute_input\":\"2023-04-28T10:31:00.263469Z\",\"iopub.status.idle\":\"2023-04-28T10:31:02.295299Z\",\"shell.execute_reply.started\":\"2023-04-28T10:31:00.263417Z\",\"shell.execute_reply\":\"2023-04-28T10:31:02.294234Z\"}}\nfrom datasets import load_dataset\n\ndf = load_dataset(\"squad\", split=\"train\").to_pandas()\ndf = df[[\"title\", \"context\"]]\ndf = df.drop_duplicates(subset=\"context\")\ndf\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:31:04.926781Z\",\"iopub.execute_input\":\"2023-04-28T10:31:04.927184Z\",\"iopub.status.idle\":\"2023-04-28T10:31:05.772247Z\",\"shell.execute_reply.started\":\"2023-04-28T10:31:04.927145Z\",\"shell.execute_reply\":\"2023-04-28T10:31:05.771182Z\"}}\nimport pinecone\npinecone.init(\n    api_key=\"71065eff-7f95-48c2-a3e1-4d2ef782a8a8\",\n    environment=\"eu-west4-gcp\"\n)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:31:08.121949Z\",\"iopub.execute_input\":\"2023-04-28T10:31:08.122973Z\",\"iopub.status.idle\":\"2023-04-28T10:31:09.110671Z\",\"shell.execute_reply.started\":\"2023-04-28T10:31:08.122932Z\",\"shell.execute_reply\":\"2023-04-28T10:31:09.109687Z\"}}\nindex_name = \"extractive-question-answering\"\n\n\nif index_name not in pinecone.list_indexes():\n\n    pinecone.create_index(\n        index_name,\n        dimension=384,\n        metric=\"cosine\"\n    )\nindex = pinecone.Index(index_name)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:31:12.065576Z\",\"iopub.execute_input\":\"2023-04-28T10:31:12.066550Z\",\"iopub.status.idle\":\"2023-04-28T10:31:12.400142Z\",\"shell.execute_reply.started\":\"2023-04-28T10:31:12.066493Z\",\"shell.execute_reply\":\"2023-04-28T10:31:12.399088Z\"}}\nimport torch\nfrom sentence_transformers import SentenceTransformer\n\n\ndevice = 0 if torch.cuda.is_available() else -1\n\nretriever = SentenceTransformer('multi-qa-MiniLM-L6-cos-v1', device=device)\nretriever\n\n# %% [code] {\"_kg_hide-input\":true,\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:31:14.748902Z\",\"iopub.execute_input\":\"2023-04-28T10:31:14.749899Z\",\"iopub.status.idle\":\"2023-04-28T10:34:31.747732Z\",\"shell.execute_reply.started\":\"2023-04-28T10:31:14.749860Z\",\"shell.execute_reply\":\"2023-04-28T10:34:31.746710Z\"}}\nfrom tqdm.auto import tqdm\n\n\nbatch_size = 64\n\nfor i in tqdm(range(0, len(df), batch_size)):\n    \n    i_end = min(i+batch_size, len(df))\n    batch = df.iloc[i:i_end]\n    emb = retriever.encode(batch[\"context\"].tolist()).tolist()\n    meta = batch.to_dict(orient=\"records\")\n    ids = [f\"{idx}\" for idx in range(i, i_end)]\n    to_upsert = list(zip(ids, emb, meta))\n    _ = index.upsert(vectors=to_upsert)\n\nindex.describe_index_stats()\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:34:53.482228Z\",\"iopub.execute_input\":\"2023-04-28T10:34:53.482620Z\",\"iopub.status.idle\":\"2023-04-28T10:35:28.957531Z\",\"shell.execute_reply.started\":\"2023-04-28T10:34:53.482584Z\",\"shell.execute_reply\":\"2023-04-28T10:35:28.956442Z\"}}\nfrom transformers import pipeline\n\nmodel_name = \"deepset/electra-base-squad2\"\nreader = pipeline(tokenizer=model_name, model=model_name, task=\"question-answering\", device=device)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:35:57.480618Z\",\"iopub.execute_input\":\"2023-04-28T10:35:57.481161Z\",\"iopub.status.idle\":\"2023-04-28T10:35:57.815111Z\",\"shell.execute_reply.started\":\"2023-04-28T10:35:57.481122Z\",\"shell.execute_reply\":\"2023-04-28T10:35:57.814062Z\"}}\ndef get_context(question, top_k):\n    xq = retriever.encode([question]).tolist()\n    xc = index.query(xq, top_k=top_k, include_metadata=True)\n    c = [x[\"metadata\"][\"context\"] for x in xc[\"matches\"]]\n    return c\n\nquestion = \"How much oil is Egypt producing in a day?\"\ncontext = get_context(question, top_k = 1)\ncontext\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:36:01.502134Z\",\"iopub.execute_input\":\"2023-04-28T10:36:01.503286Z\",\"iopub.status.idle\":\"2023-04-28T10:36:01.529130Z\",\"shell.execute_reply.started\":\"2023-04-28T10:36:01.503237Z\",\"shell.execute_reply\":\"2023-04-28T10:36:01.527998Z\"}}\nfrom pprint import pprint\n\n\ndef extract_answer(question, context):\n    results = []\n    for c in context:\n        \n        answer = reader(question=question, context=c)\n        \n        answer[\"context\"] = c\n        results.append(answer)\n    \n    sorted_result = pprint(sorted(results, key=lambda x: x[\"score\"], reverse=True))\n    return sorted_result\n\nextract_answer(question, context)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:36:04.333103Z\",\"iopub.execute_input\":\"2023-04-28T10:36:04.333483Z\",\"iopub.status.idle\":\"2023-04-28T10:36:05.225464Z\",\"shell.execute_reply.started\":\"2023-04-28T10:36:04.333449Z\",\"shell.execute_reply\":\"2023-04-28T10:36:05.224194Z\"}}\nquestion = \"What are the first names of the men that invented youtube?\"\ncontext = get_context(question, top_k=1)\nextract_answer(question, context)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:36:21.979285Z\",\"iopub.execute_input\":\"2023-04-28T10:36:21.980270Z\",\"iopub.status.idle\":\"2023-04-28T10:36:22.319611Z\",\"shell.execute_reply.started\":\"2023-04-28T10:36:21.980231Z\",\"shell.execute_reply\":\"2023-04-28T10:36:22.318298Z\"}}\nquestion = \"What is Taylor Swift famous for?\"\ncontext = get_context(question, top_k=1)\nextract_answer(question, context)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:36:26.185909Z\",\"iopub.execute_input\":\"2023-04-28T10:36:26.186638Z\",\"iopub.status.idle\":\"2023-04-28T10:36:26.544252Z\",\"shell.execute_reply.started\":\"2023-04-28T10:36:26.186600Z\",\"shell.execute_reply\":\"2023-04-28T10:36:26.543264Z\"}}\nquestion = \"Who was the first person to step foot on the moon?\"\ncontext = get_context(question, top_k=3)\nextract_answer(question, context)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:36:31.942855Z\",\"iopub.execute_input\":\"2023-04-28T10:36:31.943602Z\",\"iopub.status.idle\":\"2023-04-28T10:36:45.401295Z\",\"shell.execute_reply.started\":\"2023-04-28T10:36:31.943560Z\",\"shell.execute_reply\":\"2023-04-28T10:36:45.400088Z\"}}\n pip install streamlit\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:38:09.758348Z\",\"iopub.execute_input\":\"2023-04-28T10:38:09.758765Z\",\"iopub.status.idle\":\"2023-04-28T10:38:09.769241Z\",\"shell.execute_reply.started\":\"2023-04-28T10:38:09.758724Z\",\"shell.execute_reply\":\"2023-04-28T10:38:09.767936Z\"}}\n%%writefile my_app.py\n\nimport streamlit as st\nimport pinecone\nimport streamlit as st\nfrom transformers import pipeline\nfrom sentence_transformers import SentenceTransformer\n\nPINECONE_KEY = st.secrets[\"71065eff-7f95-48c2-a3e1-4d2ef782a8a8\"]  \n\n@st.experimental_singleton\ndef init_pinecone():\n    pinecone.init(api_key=71065eff-7f95-48c2-a3e1-4d2ef782a8a8, environment=\"us-west1-gcp\")  \n    return pinecone.Index(\"extractive-question-answering\")\n    \n@st.experimental_singleton\ndef init_models():\n    retriever = SentenceTransformer(\"multi-qa-MiniLM-L6-cos-v1\")\n    model_name = 'deepset/electra-base-squad2'\n    reader = pipeline(tokenizer=model_name, model=model_name, task='question-answering')\n    return retriever, reader\n\nst.session_state.index = init_pinecone()\nretriever, reader = init_models()\n\n\ndef card(title, context, score):\n    return st.markdown(f\"\"\"\n    <div class=\"container-fluid\">\n        <div class=\"row align-items-start\">\n             <div  class=\"col-md-12 col-sm-12\">\n                 <b>{title}</b>\n                 <br>\n                 <span style=\"color: #808080;\">\n                     <small>{context}</small>\n                     [<b>Score: </b>{score}]\n                 </span>\n             </div>\n        </div>\n     </div>\n        \"\"\", unsafe_allow_html=True)\n\nst.title(\"\")\n\nst.write(\"\"\"\n# Extractive Question Answering\nAsk me a question!\n\"\"\")\n\nst.markdown(\"\"\"\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\">\n\"\"\", unsafe_allow_html=True)\n\ndef run_query(query):\n    xq = retriever.encode([query]).tolist()\n    try:\n        xc = st.session_state.index.query(xq, top_k=3, include_metadata=True)\n    except:\n        # force reload\n        pinecone.init(api_key=PINECONE_KEY, environment=\"eu-west4-gcp\")\n        st.session_state.index = pinecone.Index(\"extractive-question-answering\")\n        xc = st.session_state.index.query(xq, top_k=3, include_metadata=True)\n\n    results = []\n    for match in xc['matches']:\n        answer = reader(question=query, context=match[\"metadata\"]['context'])\n        answer[\"title\"] = match[\"metadata\"]['title']\n        answer[\"context\"] = match[\"metadata\"]['context']\n        results.append(answer)\n\n    sorted_result = sorted(results, key=lambda x: x['score'], reverse=True)\n\n    for r in sorted_result:\n        answer = r[\"answer\"]\n        context = r[\"context\"].replace(answer, f\"<mark>{answer}</mark>\")\n        title = r[\"title\"].replace(\"_\", \" \")\n        score = round(r[\"score\"], 4)\n        card(title, context, score)\n\nquery = st.text_input(\"Search!\", \"\")\n\nif query != \"\":\n    run_query(query)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:38:25.347055Z\",\"iopub.execute_input\":\"2023-04-28T10:38:25.347426Z\",\"iopub.status.idle\":\"2023-04-28T10:38:39.234872Z\",\"shell.execute_reply.started\":\"2023-04-28T10:38:25.347394Z\",\"shell.execute_reply\":\"2023-04-28T10:38:39.233442Z\"}}\n!wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:38:49.627763Z\",\"iopub.execute_input\":\"2023-04-28T10:38:49.628192Z\",\"iopub.status.idle\":\"2023-04-28T10:38:50.975471Z\",\"shell.execute_reply.started\":\"2023-04-28T10:38:49.628149Z\",\"shell.execute_reply\":\"2023-04-28T10:38:50.974089Z\"}}\n!unzip ngrok-stable-linux-amd64.zip\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:39:01.359282Z\",\"iopub.execute_input\":\"2023-04-28T10:39:01.359947Z\",\"iopub.status.idle\":\"2023-04-28T10:39:01.449918Z\",\"shell.execute_reply.started\":\"2023-04-28T10:39:01.359890Z\",\"shell.execute_reply\":\"2023-04-28T10:39:01.447587Z\"}}\nget_ipython().system_raw('./ngrok http 8501 &')\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:39:11.131453Z\",\"iopub.execute_input\":\"2023-04-28T10:39:11.132624Z\",\"iopub.status.idle\":\"2023-04-28T10:39:12.354151Z\",\"shell.execute_reply.started\":\"2023-04-28T10:39:11.132578Z\",\"shell.execute_reply\":\"2023-04-28T10:39:12.352415Z\"}}\n!curl -s http://localhost:4040/api/tunnels | python3 -c \\\n    'import sys, json; print(\"Execute the next cell and the go to the following URL: \" +json.load(sys.stdin)[\"tunnels\"][0][\"public_url\"])'\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-04-28T10:40:21.980825Z\",\"iopub.execute_input\":\"2023-04-28T10:40:21.981582Z\"}}\n!streamlit run ./my_app.py\n\n# %% [code]\n","metadata":{"_uuid":"b278d433-80a0-41ea-b667-08b847cf781e","_cell_guid":"276b6ff5-39bb-4120-8571-c176d1ba185e","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}